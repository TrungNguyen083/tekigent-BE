// <auto-generated />
using System;
using Certificate.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Certificate.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Certificate.Domain.Entities.Collection", b =>
            {
                b.Property<int>("id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                b.Property<string>("name")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<int>("noOfProject")
                    .HasColumnType("int");

                b.Property<string>("description")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime>("createdAt")
                    .HasColumnType("datetime2");

                b.HasKey("id");

                b.ToTable("Collections");
            });

            modelBuilder.Entity("Certificate.Domain.Entities.Mentor", b =>
            {
                b.Property<int>("id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                b.Property<string>("mentorName")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("mentorImgSrc")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime>("createdAt")
                    .HasColumnType("datetime2");

                b.HasKey("id");

                b.ToTable("Mentors");
            });

            modelBuilder.Entity("Certificate.Domain.Entities.Project", b =>
            {
                b.Property<int>("id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                b.Property<int?>("collectionId")
                    .HasColumnType("int");

                b.Property<string>("name")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("description")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("projectBgImage")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime>("createdAt")
                    .HasColumnType("datetime2");

                b.Property<DateTime>("lastUpdated")
                    .HasColumnType("datetime2");

                b.Property<int>("credentialsNo")
                    .HasColumnType("int");

                b.Property<int>("unpublishedNo")
                    .HasColumnType("int");

                b.HasKey("id");

                b.HasIndex("collectionId");

                b.ToTable("Projects");
            });

            modelBuilder.Entity("Certificate.Domain.Entities.Course", b =>
            {
                b.Property<int>("id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                b.Property<string>("courseName")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<int>("identifierId")
                    .HasColumnType("int");

                b.Property<string>("courseWebsite")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("description")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("skills")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("primary")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("bgImgSrc")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("certificateImage")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("badgeImage")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime>("publishAt")
                    .HasColumnType("datetime2");

                b.Property<int>("like")
                    .HasColumnType("int");

                b.Property<int>("noOfMembers")
                    .HasColumnType("int");

                b.Property<DateTime>("createdAt")
                    .HasColumnType("datetime2");

                b.Property<DateTime>("lastUpdated")
                    .HasColumnType("datetime2");

                b.HasKey("id");

                b.HasIndex("identifierId");

                b.ToTable("Courses");
            });

            modelBuilder.Entity("Certificate.Domain.Entities.ProjectCourse", b =>
            {
                b.Property<int>("id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                b.Property<int>("projectId")
                    .HasColumnType("int");

                b.Property<int>("courseId")
                    .HasColumnType("int");

                b.HasKey("id");

                b.HasIndex("projectId");

                b.HasIndex("courseId");

                b.ToTable("ProjectCourse");
            });

            modelBuilder.Entity("Certificate.Domain.Entities.Student", b =>
            {
                b.Property<int>("id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                b.Property<string>("firstName")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("lastName")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("email")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("imgSrc")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("phoneNo")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("address")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("id");

                b.ToTable("Students");
            });

            modelBuilder.Entity("Certificate.Domain.Entities.CourseStudent", b =>
            {
                b.Property<int>("id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                b.Property<int>("courseId")
                    .HasColumnType("int");

                b.Property<int>("studentId")
                    .HasColumnType("int");

                b.HasKey("id");

                b.HasIndex("courseId");

                b.HasIndex("studentId");

                b.ToTable("CourseStudent");
            });


            modelBuilder.Entity("Certificate.Domain.Entities.Project", b =>
            {
                b.HasOne("Certificate.Domain.Entities.Collection", "Collection")
                    .WithMany("Projects")
                    .HasForeignKey("collectionId");

                b.Navigation("Collection");
            });

            modelBuilder.Entity("Certificate.Domain.Entities.Course", b =>
            {
                b.HasOne("Certificate.Domain.Entities.Mentor", "Mentor")
                    .WithMany("Courses")
                    .HasForeignKey("identifierId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Mentor");
            });

            modelBuilder.Entity("Certificate.Domain.Entities.ProjectCourse", b =>
            {
                b.HasOne("Certificate.Domain.Entities.Project", "Project")
                    .WithMany("ProjectCourses")
                    .HasForeignKey("projectId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Certificate.Domain.Entities.Course", "Course")
                    .WithMany("ProjectCourses")
                    .HasForeignKey("courseId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Project");

                b.Navigation("Course");
            });

            modelBuilder.Entity("Certificate.Domain.Entities.CourseStudent", b =>
            {
                b.HasOne("Certificate.Domain.Entities.Course", "Course")
                    .WithMany("CourseStudents")
                    .HasForeignKey("courseId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Certificate.Domain.Entities.Student", "Student")
                    .WithMany("CourseStudents")
                    .HasForeignKey("studentId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Course");

                b.Navigation("Student");
            });

            modelBuilder.Entity("Certificate.Domain.Entities.Collection", b =>
            {
                b.Navigation("Projects");
            });

            modelBuilder.Entity("Certificate.Domain.Entities.Course", b =>
            {
                b.Navigation("ProjectCourses");
                b.Navigation("CourseStudents");
            });

            modelBuilder.Entity("Certificate.Domain.Entities.Project", b =>
            {
                b.Navigation("ProjectCourses");
            });

            modelBuilder.Entity("Certificate.Domain.Entities.Student", b =>
            {
                b.Navigation("CourseStudents");
            });

            modelBuilder.Entity("Certificate.Domain.Entities.Mentor", b =>
            {
                b.Navigation("Courses");
            });

#pragma warning restore 612, 618
        }
    }
}
